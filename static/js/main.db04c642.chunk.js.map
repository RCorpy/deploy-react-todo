{"version":3,"sources":["reymon.png","App2.js","Header.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","data","setData","title","setTitle","body","setBody","useEffect","abortController","AbortController","console","log","axios","get","then","res","catch","err","abort","titleStyle","marginLeft","width","bodyStyle","buttonStyle","marginRight","itemContainer","marginTop","className","Navbar","Form","inline","InputGroup","Prepend","Text","id","FormControl","placeholder","aria-label","aria-describedby","value","onChange","e","target","maxLength","onSubmit","preventDefault","post","prev","concat","postData","newID","Date","getTime","Button","type","ListGroup","style","map","element","horizontal","key","Item","onClick","filter","Header","src","reymon","height","display","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.db04c642.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/reymon.8db7e601.png\";","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {Navbar, Form, InputGroup, FormControl, Button, ListGroup} from 'react-bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nfunction App(){\r\n    const [data, setData] = useState([])\r\n    const [title, setTitle] = useState(\"\")\r\n    const [body, setBody] = useState(\"\")\r\n\r\n    useEffect(()=>{\r\n        const abortController = new AbortController()\r\n\r\n        fetchData()\r\n        \r\n        return (function cleanup(){\r\n            abortController.abort()\r\n        })\r\n    }\r\n        ,[])\r\n\r\n    function fetchData(){\r\n        console.log(\"fetching\")\r\n        axios.get('http://localhost:8080/api')\r\n        .then((res) => {\r\n            const data = res.data\r\n            setData(data)\r\n            console.log(\"data recieved\", data)\r\n        })\r\n        .catch((err) => console.log(err))\r\n    }\r\n\r\n    function postData(data){\r\n        console.log(\"posting\")\r\n        \r\n        axios.post('http://localhost:8080/api', data)\r\n        .then((res) => {\r\n            console.log(\"data posted\", data)\r\n        })\r\n        .catch((err) => console.log(err))\r\n        \r\n        setData(prev => prev.concat(data))\r\n    }\r\n\r\n    function deleteData(id){\r\n        axios.post(`http://localhost:8080/api/${id}`)\r\n        .then((res) => console.log(\"Data deleted\"))\r\n        .catch((err) => console.log(err))\r\n\r\n        setData(data.filter(element => element.newID !== id))\r\n\r\n    }\r\n        \r\n    function handleSubmit(e) {\r\n        e.preventDefault()\r\n        if (title && body){\r\n            const data = {\r\n                title: title,\r\n                body: body,\r\n                newID: new Date().getTime()\r\n            }\r\n            \r\n            postData(data)\r\n            setBody(\"\")\r\n            setTitle(\"\")\r\n        }\r\n    }\r\n\r\n    const titleStyle = {\r\n        marginLeft: '15%',\r\n        width: '25%'\r\n    }\r\n    const bodyStyle = {\r\n        width: '60%'\r\n    }\r\n    const buttonStyle = {\r\n        marginRight: '15%'\r\n    }\r\n\r\n    const listContainer = {\r\n        marginTop: '30px'\r\n    }\r\n\r\n    const itemContainer = {\r\n        marginTop: '10px'\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Navbar className=\"bg-light justify-content-between\">\r\n            <Form inline>\r\n                <InputGroup>\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text id=\"basic-addon1\">Add new To Do</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                    placeholder=\"Title\"\r\n                    aria-label=\"Title\"\r\n                    aria-describedby=\"basic-addon1\"\r\n                    value={title}\r\n                    onChange={e => setTitle(e.target.value)}\r\n                    maxLength = {25}\r\n                />\r\n                <FormControl\r\n                    placeholder=\"Body\"\r\n                    aria-label=\"Body\"\r\n                    aria-describedby=\"basic-addon1\"\r\n                    value={body}\r\n                    onChange={e => setBody(e.target.value)}\r\n                    maxLength = {80}\r\n                />\r\n                </InputGroup>\r\n            </Form>\r\n            <Form inline onSubmit={handleSubmit}>\r\n                <Button type=\"submit\">Add</Button>\r\n            </Form>\r\n            </Navbar>\r\n            <ListGroup style={listContainer}>\r\n            {\r\n            data.map(element => \r\n                <ListGroup horizontal key={element.newID} style = {itemContainer}>\r\n                    <ListGroup.Item style={titleStyle}>{element.title}</ListGroup.Item>\r\n                    <ListGroup.Item style={bodyStyle}>{element.body}</ListGroup.Item>\r\n                    <ListGroup.Item style={buttonStyle}><button onClick={() => deleteData(element.newID)}>Done</button></ListGroup.Item>\r\n                </ListGroup>\r\n          )}\r\n            </ListGroup>\r\n\r\n        </div>\r\n      )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\n//import './Header.css';\nimport reymon from './reymon.png'\n\nfunction Header () {\n\n  const imageStyle = {\n    height: '300px',\n    display: \"block\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\"\n  }\n\n\n\n  return (\n    <div>\n      <img src={reymon} style={imageStyle} alt=\"\"></img>\n    </div>\n  )\n}\n\nexport default Header","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App2';\nimport Header from './Header';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}